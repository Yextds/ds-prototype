---
{
"stream": {
"$id": "eventsAndPress-categories",
"source": "knowledgeGraph",
"destination": "pages",
"filter": {
"entityTypes": [
"ce_dotsquaresPrototype"
],
"savedFilterIds":[
"928320257"
]
},
"fields": [
"id",
"uid",
"meta",
"name",
"slug",
"shortDescription",
"c_relatedCategory.photoGallery",
"c_relatedCategory.name",
"c_relatedCategory.c_richTextDescription",
"c_relatedCategory.c_slug"
],
"localization": {
"locales": ["en"]
}
},
"urlFormat": "{{slug}}"
}
---
<!DOCTYPE html>
<html lang="en">
   <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <meta http-equiv="X-UA-Compatible" content="ie=edge">
      <title>{{name}}</title>
      <meta name="description" content=Category page for {{name}}.>
      {{>head}}
      <link href="https://fonts.googleapis.com/css?family=Work+Sans:200,400&display=swap" rel="stylesheet">
      <link rel="stylesheet" href="https://unpkg.com/flowbite@1.4.1/dist/flowbite.min.css" />
      <script src="https://unpkg.com/flowbite@1.4.1/dist/flowbite.js"></script>
      <script src="./TW-ELEMENTS-PATH/dist/js/index.min.js"></script>

   </head>
   <body>
      {{>navbar}}
      <div class="flex h-full py-8 px-6 mx-auto bg-black heading">
         <div class=" text-white px-6 md:px-12">
            <h1 class=" md:text-5xl xl:text-5xl font-bold tracking-tight mb-12 text-yellow-500 firstHeader mt-20">
               {{name}}<br />
            </h1>
            <p class="text-white ">{{convertRTFToHTML shortDescription}}</p>
         </div>
      </div>
      {{!--body  --}}
      {{!-- ce_navigation --}}
      <div class="hidden md:flex grid gap-x-10 bg-black pressNavbar">
      </div>
      {{!-- cards --}}
      <div  class="press grid grid-cols-3 justify-evenly mb-10"> 
      </div>
      <div class="contain-pagination"></div>
      </div>
      {{!-- footer --}}
      <div class="w-full site-footer">
    <div class="centered-container">
      {{>footer}}
    </div>
  </div>
  
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js">  </script>

<script type="text/javascript">
var api_key = "b262ae7768eec3bfa53bfca6d48e4000";
var v = "20211229";
var api_url = "https://liveapi-sandbox.yext.com/v2/accounts/me/entities?api_key=" + api_key + "&v=" + v;


$(document).ready(function() {

   // $("#all.html").addClass("active");
    get_menu();
    getData(0, true, "Ce_dotsEvent");
});
 
// $(".nav1").load(function() {
//     alert("yes");
  
            // }); 
// if("{{slug}}"){

//    }

function get_nav1($this) {
    var data_id = $this.attr("data-id");
    var entitype = "Ce_dotsEvent";
    if (data_id == "ALl.html") {
        entitype = "Ce_dotsEvent";
    } else if (data_id == "Events.html") {
        entitype = "ce_event";
    } else if (data_id == "Press.html") {
        entitype = "ce_press";
    } else if (data_id == "innovation.html") {
        entitype = "ce_innovation";
    } else if (data_id == "Tech.html") {
        entitype = "ce_tech";
    }
    $('.pressNavbar a').removeClass("active");
    $this.addClass("active");    
    getData(0, true, entitype);
}


function get_menu() {

    var entitype = '';
    var url = api_url + "&limit=40&entityTypes=ce_navigation";

    fetch(url, {
            method: "GET"
        })
        .then((res) => res.json())
        .then(function(data) {
            var html = "";
            var pathname = window.location.pathname.replace('/', '');
            //var result=res;
            var cat = data.response.entities;
            // console.log(cat);
            cat.forEach((f, i, ) => {
                let n = f.name; // Here n means Name
                //console.log(n);
                let s = f.c_slug; // Here s means Slug


                let activeClass = '';
                if (s == pathname) {
                    activeClass = 'active';
                }
                
                    if (s == "ALl.html") {
                        entitype = "Ce_dotsEvent";
                    } else if (s == "Events.html") {
                        entitype = "ce_event";
                    } else if (s == "Press.html") {
                        entitype = "ce_press";
                    } else if (s == "innovation.html") {
                        entitype = "ce_innovation";
                    } else if (s == "Tech.html") {
                        entitype = "ce_tech";
                    }

                html += '<a class="nav1 bg-black text-white hover:text-yellow-500 id="'+s+'"' + activeClass + ' ml-3 mr-3 " data-entitytype="'+ entitype + '" data-id="' + s + '" href="#">' + n + '</a>';
            })
            $(".pressNavbar").empty();
            $(".pressNavbar").append(html);
            $('.pressNavbar a:first-child').addClass('active');
            $(".nav1").click(function() {
                get_nav1($(this));
            }); 

        })

}

function paginate(totalItems, currentPage, pageSize, maxPages) {
    if (currentPage === void 0) {
        currentPage = 1;
    }
    if (pageSize === void 0) {
        pageSize = 10;
    }
    if (maxPages === void 0) {
        maxPages = 10;
    }
    // calculate total pages
    var totalPages = Math.ceil(totalItems / pageSize);
    // ensure current page isn't out of range
    if (currentPage < 1) {
        currentPage = 1;
    } else if (currentPage > totalPages) {
        currentPage = totalPages;
    }
    var startPage, endPage;
    if (totalPages <= maxPages) {
        // total pages less than max so show all pages
        startPage = 1;
        endPage = totalPages;
    } else {
        // total pages more than max so calculate start and end pages
        var maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);
        var maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;
        if (currentPage <= maxPagesBeforeCurrentPage) {
            // current page near the start
            startPage = 1;
            endPage = maxPages;
        } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {
            // current page near the end
            startPage = totalPages - maxPages + 1;
            endPage = totalPages;
        } else {
            // current page somewhere in the middle
            startPage = currentPage - maxPagesBeforeCurrentPage;
            endPage = currentPage + maxPagesAfterCurrentPage;
        }
    }
    // calculate start and end item indexes
    var startIndex = (currentPage - 1) * pageSize;
    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);
    // create an array of pages to ng-repeat in the pager control
    var pages = Array.from(Array((endPage + 1) - startPage).keys()).map(function(i) {
        return startPage + i;
    });
    // return object with all pager properties required by the view
    return {
        totalItems: totalItems,
        currentPage: currentPage,
        pageSize: pageSize,
        totalPages: totalPages,
        startPage: startPage,
        endPage: endPage,
        startIndex: startIndex,
        endIndex: endIndex,
        pages: pages
    };
}
//console.log(paginate(70, 1, 10, 5));
function appendpaginationlinks(pagesLinks) {

   // console.log('pagesLinks', pagesLinks)
    const pages = pagesLinks.pages;
    const totalPages = pagesLinks.totalPages;
    const currentPage = pagesLinks.currentPage;
    //console.log(pages.length);
    if(pages.length>1){



    var pagehtml = "<div class=flex-inline>";
    pagehtml += "<ul class='pagination  relative z-0 inline-flex rounded-md shadow-sm -space-x-px'>";

    // if(currentPage>1){
    //   pagehtml+='<li><a href="#" class="page-btn relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 mr-3" data-id="1">First</a></li>';
    // }

    if (currentPage > 1) {
        pagehtml += '<li><a href="#" class="page-btn relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 mr-3" data-id="1">First</a></li>';
        pagehtml += '<li><a href="#" class="page-btn relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 mr-3" data-id=' + (currentPage - 1) + '><</a></li>';
    }

    pages.forEach((e) => {

        var isActive = "";

        if (e == currentPage) {
            isActive = "active";
        }
        pagehtml += '<li><a href="#" class="' + isActive + ' page-btn relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 mr-3" data-id=' + e + '>' + e + '</a></li>';
    })

    if (totalPages !== currentPage) {
        pagehtml += '<li><a href="#" class="page-btn relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 mr-3"  data-id=' + (currentPage + 1) + '>></a></li>';
        pagehtml += '<li><a href="#" class="page-btn relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 mr-3" data-id=' + totalPages + '>Last</a></li>';
    }

    pagehtml += "</ul></div>";

}
else{
    pagehtml ="";
}

    $(".contain-pagination").empty();
    $('.contain-pagination').append(pagehtml);
}

function renderPaginationLinks(pagesLinks, count = 0) {
       const currentPage = pagesLinks.currentPage;
    appendpaginationlinks(pagesLinks);

    setTimeout(() => {

        $(document).on('click', '.page-btn', function() {
            const limit = 10;
            const dataId = $(this).attr('data-id');
            const entity = $('.active').attr("data-entitytype");
            //console.log(entity);
            const newOffset = (limit * Number(dataId)) - (limit);
            offset = newOffset;
            // alert(offset);
            if (offset !== currentPage) {
                $('.press').empty();

            }
            getData(offset, false, entity);
            const pagLinks = paginate(count, parseInt(dataId), limit, 2);
         
            appendpaginationlinks(pagLinks);
        });

    }, 1000);

}
let offset = 0;

function getData(offset, pagination = true, entitype) {
    const limit = 10;
    let request_url =
        api_url +
        "&limit=" +
        limit +
        "&offset=" +
        offset +
        "&entityTypes=" +
        entitype +
        '&sortBy=[{"name":"ASCENDING"}]';

    getRequest(request_url, pagination);

}

function getRequest(request_url, isPagingnation = false) {
 //console.log(request_url);
    fetch(request_url, {
            method: "GET"
        })
        .then((res) => res.json())
        .then(function(data) {
            let count = data.response.count;
            const limit = 10;            
            var cat = data.response.entities;
            var html = "";
            cat.forEach((f, i) => {                
                var name = f.name;
                var slug = f.c_slug;
                var description = f.c_richTextDescription;
                var photo = f.photoGallery;               
                photo.forEach(function(e, i) {
                    var url = e.image.url;
                    html += '<div class=" container ml-20 max-w-sm rounded overflow-hidden shadow-lg ">\
     <a class="inline-block" href=' + slug + '>\
         <img class="object-cover h-48 w-96 py-5 pb-5 container" src=' + url + ' alt="">\
   </a>\
    <div class="text-block">\
     <h4>Tech</h4>\
   </div>\
   <div class="middle">\
      <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-00 dark:text-white ">' + name + '</h5>\
   <p class="addReadMore showlesscontent">' + description + '</p>\
   </div>\
   </div>';

                });
                
            

            });
            
            $('.press').html(html);
             var pagLinks = paginate(count, 1, limit, 2);
             if(isPagingnation){
                renderPaginationLinks(pagLinks, count);
            }
          
            
        })

        .catch((err) => {
            alert("There was an error");
            console.error(err);
        });
}
   
   
   
</script>
</body>
</html>